"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6178],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(t),u=r,h=d["".concat(l,".").concat(u)]||d[u]||g[u]||i;return t?o.createElement(h,a(a({ref:n},p),{},{components:t})):o.createElement(h,a({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[d]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const i={sidebar_position:3},a="Direct (g)RPC connection to nodes",c={unversionedId:"how-to/direct-grpc",id:"how-to/direct-grpc",title:"Direct (g)RPC connection to nodes",description:"One of the prerequisits for scaling lightning is to have traefik installed on the cluster to enable ingress into the cluster from outside. The command specified in the Getting Started references an values file where we specify 40 endpoints to use with nodes in the network. One of those endpoints is used for scaling lightning itself to talk to nodes from the cli or library. This leaves 39 endpoints which can be allocated to bitcoind or lightning nodes to gain direct external acccess to their (g)RPC services.",source:"@site/docs/how-to/direct-grpc.md",sourceDirName:"how-to",slug:"/how-to/direct-grpc",permalink:"/docs/how-to/direct-grpc",draft:!1,editUrl:"https://github.com/scaling-lightning/scaling-lightning/tree/main/docs/docs/how-to/direct-grpc.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Persist node data",permalink:"/docs/how-to/persist-data"},next:{title:"Running in the cloud",permalink:"/docs/how-to/run-in-cloud"}},l={},s=[{value:"Enable external access",id:"enable-external-access",level:2},{value:"Get connection details",id:"get-connection-details",level:2}],p={toc:s},d="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"direct-grpc-connection-to-nodes"},"Direct (g)RPC connection to nodes"),(0,r.kt)("p",null,"One of the prerequisits for scaling lightning is to have traefik installed on the cluster to enable ingress into the cluster from outside. The command specified in the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started"},"Getting Started")," references an values file where we specify 40 endpoints to use with nodes in the network. One of those endpoints is used for scaling lightning itself to talk to nodes from the cli or library. This leaves 39 endpoints which can be allocated to bitcoind or lightning nodes to gain direct external acccess to their (g)RPC services."),(0,r.kt)("p",null,"The available endpoints are named ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint1")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"endpoint39")),(0,r.kt)("h2",{id:"enable-external-access"},"Enable external access"),(0,r.kt)("p",null,"The following configuration enables direct external access to bitcoind, cln and lnd:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"repositories:\n  - name: scalinglightning\n    url: https://charts.scalinglightning.com\nreleases:\n  - name: bitcoind\n    namespace: sl\n    chart: scalinglightning/bitcoind\n    values:\n      - rpcEntryPoint: endpoint37\n      - zmqPubBlockEntryPoint: endpoint38\n      - zmqPubTxEntryPoint: endpoint39\n  - name: alice\n    namespace: sl\n    chart: scalinglightning/cln\n    values:\n      - gRPCEntryPoint: endpoint1\n  - name: bob\n    namespace: sl\n    chart: scalinglightning/lnd\n    values:\n      - gRPCEntryPoint: endpoint2\n")),(0,r.kt)("h2",{id:"get-connection-details"},"Get connection details"),(0,r.kt)("p",null,"Connection details can be queried using the CLI or library"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./scaling-lightning connectiondetails --all\n")),(0,r.kt)("p",null,"Example output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bitcoind\n  type:  rpc\n  host: localhost\n  port: 28137\n\n  type:  zmq blocks\n  host: localhost\n  port: 28138\n\n  type:  zmp txs\n  host: localhost\n  port: 28139\n\nalice\n  type:  grpc\n  host: localhost\n  port: 28101\n\nbob\n  type:  grpc\n  host: localhost\n  port: 28102\n")),(0,r.kt)("p",null,"Or in code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'connectionDetails, err := network.GetConnectionDetails("alice")\nassert.NoError(err)\nlog.Info().Msgf("alice connection host: %v", connectionDetails[0].Host)\nlog.Info().Msgf("alice connection host: %d", connectionDetails[0].Port)\n')))}g.isMDXComponent=!0}}]);