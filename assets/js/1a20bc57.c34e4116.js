"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4468],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),c=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,f=u["".concat(s,".").concat(d)]||u[d]||g[d]||i;return t?o.createElement(f,a(a({ref:n},p),{},{components:t})):o.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7905:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=t(7462),r=(t(7294),t(3905));const i={sidebar_position:5},a="CLI",l={unversionedId:"cli",id:"cli",title:"CLI",description:"CLI is one option for creating and interacting with the network (the other being code via a library).",source:"@site/docs/cli.md",sourceDirName:".",slug:"/cli",permalink:"/docs/cli",draft:!1,editUrl:"https://github.com/scaling-lightning/scaling-lightning/tree/main/docs/docs/cli.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Configuration options",permalink:"/docs/configuration"},next:{title:"Golang API",permalink:"/docs/api"}},s={},c=[{value:"Installation",id:"installation",level:2},{value:"Use",id:"use",level:2}],p={toc:c},u="wrapper";function g(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cli"},"CLI"),(0,r.kt)("p",null,"CLI is one option for creating and interacting with the network (the other being code via a library)."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Download binary for your system from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/scaling-lightning/scaling-lightning/releases"},"Releases")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# untar to get binary\ntar -xzf scaling-lightning-[version]-[os]-[architecture].tar.gz\n\n# Mac OS only - mark file as safe so it will run\nxattr -dr com.apple.quarantine scaling-lightning\n\n# run - should print CLI help\n./scaling-lightning\n")),(0,r.kt)("h2",{id:"use"},"Use"),(0,r.kt)("p",null,"Before using the CLI, ensure the dependencies have been installed on your local system and cluster by following the prerequisits section of the ",(0,r.kt)("a",{parentName:"p",href:"/docs/getting-started"},"getting started guide")),(0,r.kt)("p",null,"To see a full list of commands run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./scaling-lightning help\n")),(0,r.kt)("p",null,"Output of help:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'A CLI for interacting with the scaling-lightning network\n\nUsage:\nsl [command]\n\nAvailable Commands:\nchannelbalance    Get the onchain wallet balance of a node\ncompletion        Generate the autocompletion script for the specified shell\nconnectiondetails Output the connection details for a node or all nodes\nconnectpeer       Connect peers\ncreate            Create and start the network\ncreateinvoice     Create lightning invoice\ndestroy           destroy the network\ngenerate          Generate bitcoin blocks\nhelp              Help about any command\nlist              List the nodes in the network\nopenchannel       Open a channel between two nodes\npayinvoice        pay lightning invoice\npubkey            Get the pubkey of a node\nsend              Send on chain funds betwen nodes\nstart             Start a stopped network\nstop              Stop the network\nversion           Get the version of this binary\nwalletbalance     Get the onchain wallet balance of a node\nwriteauthfiles    Output the auth files for a node or all nodes\n\nFlags:\n-d, --debug               Enable debug logging\n-h, --help                help for sl\n-H, --host string         Host of the scaling-lightning API\n-k, --kubeconfig string   Location of Kubernetes config file (default "/Users/maxedwards/.kube/config")\n-p, --port uint16         Port of the scaling-lightning API\n\nUse "sl [command] --help" for more information about a command.\n')),(0,r.kt)("p",null,"For specific flags for each command run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./scaling-lightning send help\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'Send on chain funds betwen nodes\n\nUsage:\n  scaling-lightning send [flags]\n\nFlags:\n  -a, --amount uint   Amount of satoshis to send\n  -f, --from string   Name of node to send from\n  -h, --help          help for send\n  -t, --to string     Name of node to send to\n\nGlobal Flags:\n  -d, --debug               Enable debug logging\n  -H, --host string         Host of the scaling-lightning API\n  -k, --kubeconfig string   Location of Kubernetes config file (default "/Users/maxedwards/.kube/config")\n  -p, --port uint16         Port of the scaling-lightning API\n')),(0,r.kt)("p",null,"Making the command to move onchain funds from bitcoind to alice be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"./scaling-lightning send -f bitcoind -t alice -a 1000000\n")))}g.isMDXComponent=!0}}]);